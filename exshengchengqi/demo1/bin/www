#!/usr/bin/env node

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('demo1:server');
let http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//引入包
let socketPackgae=require("socket.io");
//实例化
let io=socketPackgae(server);
//建立连接
io.on("connection",(socket)=>{
	console.log("连接成功");
	//返回消息
	socket.emit("msg","欢迎聊天");
	
	//接收客户端的消息
	socket.on("msg",(data)=>{
		console.log(data);
		let msg= backMsg(data);
		socket.emit("msg",msg);
	});
	
	//连接关闭
	socket.on("disconnect",()=>{
		console.log("连接关闭");
	})
	
})

let backMsg=(data)=>{
	let msg =null;
	switch (data){
		case '小料':
			msg="我在呢1....";
			break;
		case '小2':
			msg="我在呢2....";
			break;
		case '小3':
			msg="我在呢3....";
			break;
		case '小4':
			msg="我在呢4....";
			break;
		default:
			msg="xxxxxxxxxx"; 
	}
	return msg;
}